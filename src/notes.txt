# ---------------------------------------------------------------------------- #
#                                Getting Started                               #
# ---------------------------------------------------------------------------- #
# -------------------------------- Quick Start ------------------------------- #
- npm run dev
- createApp from object or .vue file include: script setup, template, style
- to mount app to the root application id: createApp(MyComponent).mount('#app')


# ---------------------------------------------------------------------------- #
#                                  Essentials                                  #
# ---------------------------------------------------------------------------- #
# -------------------------- Creating an Application ------------------------- #
- app.config.errorHandler = (err) => {
  /* handle error */
}
- can multiple application instances

# ------------------------------ Template Syntax ----------------------------- #
- can use virtual DOM instead of template
- write value to html use: <tag>{{ variable }}</tag>
- write a html use: v-html directive (can cause XSS vulnerabilities)
- bind an attribute use: v-bind directive. eg v-bind:id="someId" or :id="someId"
- bind many attribute use: v-bind with value is an object
- bind event: v-on:click="handleFn" or shorthand @click="handleFn"
- directives: v-if, v-for, v-on, v-slot
- dynamic attribute or event use :[attribute/event]
- event modifier: @submit.prevent="handleFn" will call event.preventDefault()

# -------------------------- Reactivity Fundamentals ------------------------- #

# ---------------------------- Computed Properties --------------------------- #
- computed properties are cached based on their reactive dependencies
- it is recommended to use a "computed property" for complex logic that includes reactive data
- equal to useMemo
- computed properties can be function that return something or a property with getter (setter is optional)

# ------------------------- Class and Style Bindings ------------------------- #
- use :class or v-bind:class
- use object or array for the value
- if bind class to component, it will be bind to the root element.if multiple root element, use :class="$attrs.class" for element that's received)

# --------------------------- Conditional Rendering -------------------------- #
- v-if, v-else-if, v-else: can apply to the <template>
- v-show, v-for

# ------------------------------ List Rendering ------------------------------ #
