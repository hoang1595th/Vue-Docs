# ---------------------------------------------------------------------------- #
#                                Getting Started                               #
# ---------------------------------------------------------------------------- #
# -------------------------------- Quick Start ------------------------------- #
- npm run dev
- createApp from object or .vue file include: script, template, style
- to mount app to the root application id: createApp(MyComponent).mount('#app')


# ---------------------------------------------------------------------------- #
#                                  Essentials                                  #
# ---------------------------------------------------------------------------- #
# -------------------------- Creating an Application ------------------------- #
- app.config.errorHandler = (err) => {
  /* handle error */
}
- can multiple application instances

# ------------------------------ Template Syntax ----------------------------- #
- can use virtual DOM instead of template
- write value to html use: <tag>{{ variable }}</tag>
- write a html use: v-html directive (can cause XSS vulnerabilities)
- bind an attribute use: v-bind directive. eg v-bind:id="someId" or :id="someId"
- bind many attribute use: v-bind with value is an object
- bind event: v-on:click="handleFn" or shorthand @click="handleFn"
- directives: v-if, v-for, v-on, v-slot
- dynamic attribute or event use :[attribute/event]
- event modifier: @submit.prevent="handleFn" will call event.preventDefault()

# -------------------------- Reactivity Fundamentals ------------------------- #

# ---------------------------- Computed Properties --------------------------- #
- computed properties are cached based on their reactive dependencies
- it is recommended to use a "computed property" for complex logic that includes reactive data
- equal to useMemo
- computed properties can be function that return something or a property with getter (setter is optional)
- can wrap function with computed() to make it as computed property

# ------------------------- Class and Style Bindings ------------------------- #
- use :class or v-bind:class
- use object or array for the value
- if bind class to component, it will be bind to the root element.if multiple root element, use :class="$attrs.class" for element that's received)

# --------------------------- Conditional Rendering -------------------------- #
- v-if, v-else-if, v-else, v-for: can apply to the <template>
- v-show, v-for

# ------------------------------ List Rendering ------------------------------ #
- v-for, :key
- v-for="(value, key, index) in myObject"
- v-for="n in 10": 1,2....10
- v-for="n in even(numbers)"
- v-if has a higher priority than v-for

# ------------------------------ Event Handling ------------------------------ #
- v-on:click, @click
- inline handler, method handler, calling method in inline handler
- @click="warn($event)"
- event modifiers: 
  .stop: stopPropagation();
  .prevent: .preventDefault();
  .self: trigger only when event.target is itself
  .capture: use when adding an event listener to listen event's propagation
  .once: event only trigger once
  .passive:
- key modifiers:
  .enter: only call when the key is enter
  .page-down:
  .tab, .delete (delete & backspace), .esc, .space, .up, .down, .left, .right
  .ctrl, .alt, shift, .meta (windows key or command key on mac)
  .exact: only fire when no other keys are pressed
- @keyup.alt.enter: Alt + Enter, @click.ctrl: Ctrl + Click
- mouse modifiers:
  .left, .right, .middle

# ---------------------------- Form Input Bindings --------------------------- #
- input, textarea: use :value and @input event
- input type="checkbox | radio": use :checked and @change event
- select: use :value and @change event
- v-model for checkbox is an array
- the value of the inputs can be dynamic by using v-bind
- true-value, false-value: using with input type="checkbox | radio"
- :value: can bind non-string value
- modifiers:
  .lazy: syncs view after "change" event (by default, it's "input" event)
  .number: parse input value to number
  .trim

# ------------------------------ Lifecycle Hooks ----------------------------- #
- mounted, updated, unmounted

# --------------------------------- Watchers --------------------------------- #
- watch { question(newQuestion, oldQuestion) { }}
- deep watcher: use when watch property deep in object. option deep: true
- eager watcher: use when want handler to call immediately (by default, it's lazy). option immediate: true
- callback flush timing: use when want to access DOM after updated (by default, watchers are called before component update). option flush: 'post'
- this.$watch('question', (newQuestion) => {
- stop a watcher: const unwatch = this.$watch('foo', callback); unwatch();

# ------------------------------- Template Refs ------------------------------ #
- this.$refs.refName
- ref use with v-for will be an array
- function refs: :ref="(el) => { /* assign el to a property or ref */ }"
- ref on child component equal to this of the child component (use when absolutely need)
- expose: ['publicData', 'publicMethod']: use to limit the access to child component

# ----------------------------- Components Basics ---------------------------- #
- components: {...}: use to declare components which will use
- props: [...]: use to defined which props will be received
- @customEvent="...", $emit('customEvent')
- emits: [...]: use to declare event will be emitted
- <slot />: where display children that passed from parent
- <component :is="currentTab"></component>: dynamic component
- <my-component></my-component>
- <table> <tr is="vue:blog-post-row"></tr> </table>

# ---------------------------------------------------------------------------- #
#                              Components In-Depth                             #
# ---------------------------------------------------------------------------- #
# -------------------------- Component Registration -------------------------- #